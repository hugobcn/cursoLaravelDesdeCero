https://github.com/StydeNet/curso-de-laravel-desde-cero
https://github.com/StydeNet/curso-de-laravel-desde-cero/tree/optional_fields
https://styde.net/como-trabajar-con-form-requests-en-laravel/
https://styde.net/metodos-personalizados-para-pruebas-automatizadas-a-la-base-de-datos-con-laravel/

subir a git local:

$ git init
$ git add .                          
$ git status
$ git commit -m  "laravelDesde0V00
$ clear
------------------------------------------------

cd /var/www/hugo/stydePHP/LaravelDesde0/laravel-desde0
alias t=vendor/bin/phpunit
/** @test */
/storage/logs/laravel.logs
DB_DATABASE=laravelDesde0Test
phpunit.xml: <env name="DB_DATABASE" value="laravelDesde0Test"/>

------------------Refresdate Test-------
use Illuminate\Foundation\Testing\RefreshDatabase;

class UsersModuleTest extends TestCase {

    use RefreshDatabase;

----------------$this->assertDatabaseEmpty('users');--------------

si la tabala viene vacia

Laravel no provee un método que nos permita comprobar si una tabla está vacía, 
sin embargo nosotros podemos agregar nuestro propio método en TestCase.php:


protected function assertDatabaseEmpty($table, $connection = null)
{
    $total = $this->getConnection($connection)->table($table)->count();

    $this->assertSame(0, $total, sprintf(
        "Failed asserting the table [%s] is empty. %s %s found.", $table, $total, str_plural('row', $total)
    ));
}


--------- NUll sin crear metodo get validate--------------

 public function createUser()
    {
        DB::transaction(function () {
            
            // con 'twitter' => $this->'twitter', no cal utilizar  $data = $this->validated();    
            $data = $this->validated();

            $user = User::create([
                'name' => $data['name'],
                'email' => $data['email'],
                'password' => bcrypt($data['password'])
            ]);

            $user->profile()->create([
                'bio' => $data['bio'],
                //'twitter' => $data['twitter'],
                //  'twitter' => array_get($data,'twitter')
                //'twitter' => $data['twitter'] ?? null,
                'twitter' => $this->'twitter',        
            ]);
        });
    }


----------------------- NUll con GETValidate--------------

Evitar duplicacion campos:

UserModuleTest:


protected function GetValidData(array $custom = [])
    {
        //valores personalizados array_merge[]$custom
       //array_filter(); filtrar si es nulo
        return array_filter(array_merge([
            'name' => 'Duilio',
            'email' => 'duilio@styde.net',
            'password' => '123456',
            'bio' => 'Programador de Laravel y Vue.js',
            'twitter' => 'https://twitter.com/sileence',
        ], $custom));
    }


 /** @test */
    function test_the_twitter_field_is_optional()
    {
        $this->withoutExceptionHandling();

        $this->post('/usuarios/', $this->getValidData([
            'twitter' => null,
        ]))->assertRedirect('usuarios');

        $this->assertCredentials([
            'name' => 'Duilio',
            'email' => 'duilio@styde.net',
            'password' => '123456',
        ]);

        $this->assertDatabaseHas('user_profiles', [
            'bio' => 'Programador de Laravel y Vue.js',
            'twitter' => null,
            'user_id' => User::findByEmail('duilio@styde.net')->id,
        ]);
    }

/** @test */
    function test_the_password_is_required()
    {
        $this->from('usuarios/nuevo')
            ->post('/usuarios/', $this->getValidData([
                'password' => '',
            ]))
            ->assertRedirect('usuarios/nuevo')
            ->assertSessionHasErrors(['password']);

        $this->assertDatabaseEmpty('users');
    }


/** @test */
    function test_the_name_is_required()
    {
        $this->from('usuarios/nuevo')
            ->post('/usuarios/', $this->getValidData([
                'name' => '',
            ]))
            ->assertRedirect('usuarios/nuevo')
            ->assertSessionHasErrors(['name' => 'El campo nombre es obligatorio']);

        $this->assertDatabaseEmpty('users');
    }