https://github.com/StydeNet/curso-de-laravel-desde-cero
https://github.com/StydeNet/curso-de-laravel-desde-cero/tree/checkboxes2
https://laravel.com/docs/5.6/eloquent-relationships#many-to-many

subir a git local:

$ git init
$ git add .                          
$ git status
$ git commit -m  "laravelDesde0V00
$ clear
------------------------------------------------

cd /var/www/hugo/stydePHP/LaravelDesde0/laravel-desde0
alias t=vendor/bin/phpunit
/** @test */
/storage/logs/laravel.logs
DB_DATABASE=laravelDesde0Test
phpunit.xml: <env name="DB_DATABASE" value="laravelDesde0Test"/>

------------------Refresdate Test-------
use Illuminate\Foundation\Testing\RefreshDatabase;

class UsersModuleTest extends TestCase {

    use RefreshDatabase;

----------------$this->assertDatabaseEmpty('users');--------------

Pmuchos a muchos en BBDD vamos utilizar una tabla pivote.pivote contener 2 campos 
llaves forÃ¡neas tablas relacionadas, en el ejemplo del video: user_id y skill_id

Migrate

Schema::create('user_skill', function (Blueprint $table) {
        //...
 
        $table->unsignedInteger('user_id');
        $table->foreign('user_id')->references('id')->on('users');
 
        $table->unsignedInteger('skill_id');
        $table->foreign('skill_id')->references('id')->on('skills');
 
        //...
    });


belongsToMany en modelo

public function skills()
    {
        return $this->belongsToMany(Skill::class, 'user_skill');
    }

controlador:

$user->skills()->attach([1, 2]);


----ejemplo---

test:

/** @test */
    function test_it_creates_a_new_user()
    {
        $this->withoutExceptionHandling();

        $skillA = factory(Skill::class)->create();
        $skillB = factory(Skill::class)->create();
        $skillC = factory(Skill::class)->create();

        $this->post('/usuarios/', $this->getValidData([
            'skills' => [$skillA->id, $skillB->id],
        ]))->assertRedirect('usuarios');

        $this->assertCredentials([
            'name' => 'Duilio',
            'email' => 'duilio@styde.net',
            'password' => '123456',
        ]);

        $user = User::findByEmail('duilio@styde.net');

        $this->assertDatabaseHas('user_profiles', [
            'bio' => 'Programador de Laravel y Vue.js',
            'twitter' => 'https://twitter.com/sileence',
            'user_id' => $user->id,
            'profession_id' => $this->profession->id,
        ]);

        $this->assertDatabaseHas('user_skill', [
            'user_id' => $user->id,
            'skill_id' => $skillA->id,
        ]);

        $this->assertDatabaseHas('user_skill', [
            'user_id' => $user->id,
            'skill_id' => $skillB->id,
        ]);

        $this->assertDatabaseMissing('user_skill', [
            'user_id' => $user->id,
            'skill_id' => $skillC->id,
        ]);
    }

migrations:

class CreateUserSkillTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('user_skill', function (Blueprint $table) {
            $table->increments('id');

            $table->unsignedInteger('user_id');
            $table->foreign('user_id')->references('id')->on('users');

            $table->unsignedInteger('skill_id');
            $table->foreign('skill_id')->references('id')->on('skills');

            $table->timestamps();
        });
    }
}

request:

public function rules()
    {
        return [
            'name' => 'required',
            'email' => ['required', 'email', 'unique:users,email'],
            'password' => 'required',
            'bio' => 'required',
            'twitter' => ['nullable', 'present', 'url'],
            'profession_id' => [
                'nullable', 'present',
                Rule::exists('professions', 'id')->whereNull('deleted_at')
            ],
            'skills' => [
                'array',
                Rule::exists('skills', 'id'),
            ],
        ];
    }


public function createUser()
    {
        DB::transaction(function () {
            $data = $this->validated();

            $user = User::create([
                'name' => $data['name'],
                'email' => $data['email'],
                'password' => bcrypt($data['password']),
            ]);

            $user->profile()->create([
                'bio' => $data['bio'],
                'twitter' => $data['twitter'],
                'profession_id' => $data['profession_id'],
            ]);

            if (! empty ($data['skills'])) {
                $user->skills()->attach($data['skills']);
            }
        });
    }


user:


public function skills()
    {
        return $this->belongsToMany(Skill::class, 'user_skill');
    }


test:

/** @test */
    function the_skills_must_be_an_array()
    {
        $this->handleValidationExceptions();

        $this->from('usuarios/nuevo')
            ->post('/usuarios/', $this->getValidData([
                'skills' => 'PHP, JS'
            ]))
            ->assertRedirect('usuarios/nuevo')
            ->assertSessionHasErrors(['skills']);

        $this->assertDatabaseEmpty('users');
    }

    /** @test */
    function the_skills_must_be_valid()
    {
        $this->handleValidationExceptions();

        $skillA = factory(Skill::class)->create();
        $skillB = factory(Skill::class)->create();

        $this->from('usuarios/nuevo')
            ->post('/usuarios/', $this->getValidData([
                'skills' => [$skillA->id, $skillB->id + 1],
            ]))
            ->assertRedirect('usuarios/nuevo')
            ->assertSessionHasErrors(['skills']);

        $this->assertDatabaseEmpty('users');
    }